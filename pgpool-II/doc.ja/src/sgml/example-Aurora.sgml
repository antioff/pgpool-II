<!-- doc/src/sgml/example-Aurora.sgml -->

<sect1 id="example-Aurora">
 <!--
 <title>Aurora Configuration Example</title>
 -->
 <title>Auroraの設定例</title>

 <para>
  <!--
  <productname>Amazon Aurora for PostgreSQL
  Compatibility</productname> (Aurora) is a managed service for
  <productname>PostgreSQL</productname>. From user's point of
  view, <productname>Aurora</productname> can be regarded as a
  streaming replication cluster with some exceptions. First,
  fail over and online recovery are managed
  by <productname>Aurora</productname>. So you don't need to
  set <xref linkend="guc-failover-command">, <xref linkend="guc-follow-master-command">,
  and recovery related parameters. In this section we explain
  how to set up <productname>Pgpool-II</productname> for Aurora.
  -->
  <productname>Amazon Aurora for PostgreSQL
   Compatibility</productname> (Aurora) は、<productname>PostgreSQL</productname>用のマネージドサービスです。
  ユーザから見ると、<productname>Aurora</productname>は、いくつか例外があるものの、ストリーミングレプリケーションのクラスタのように見えます。フェイルオーバやオンラインリカバリは<productname>Aurora</productname>によって管理されます。
  ですから、<xref linkend="guc-failover-command">、<xref linkend="guc-follow-master-command">、
    それにオンラインリカバリ関連のパラメータは設定の必要がありません。
    この章では、Aurora用の<productname>Pgpool-II</productname>設定を説明します。
 </para>

 <sect2 id="example-Aurora-config">
  <!--
  <title>Setting pgpool.conf for Aurora</title>
  -->
  <title>Auroraのためにpgpool.confを設定する</title>
  <para>
   <itemizedlist>
    <listitem>
     <para>
      <!--
      Create <filename>pgpool.conf</filename>
      from <filename>pgpool.conf.sample-stream</filename>.
      -->
      <filename>pgpool.conf.sample-stream</filename>をコピーして<filename>pgpool.conf</filename>を作ります。
     </para>
    </listitem>
    <listitem>
     <para>
      <!--
      Set <xref linkend="guc-sr-check-period"> to 0 to
      disable streaming replication delay checking.  This
      is because <productname>Aurora</productname> does
      not provide neccessary functions to check the
      replication delay.
      -->
      <xref linkend="guc-sr-check-period">を0にして、ストリーミングレプリケーション遅延チェックを無効にします。
       <productname>Aurora</productname>では、ストリーミングレプリケーションの遅延をチェックするための関数が提供されないためです。
     </para>
    </listitem>
    <listitem>
     <para>
      <!--
      Enable <xref linkend="guc-enable-pool-hba"> to on so
      that md5 authentication is enabled
      (<productname>Aurora</productname> always use md5
      authentication).
      -->
      <xref linkend="guc-enable-pool-hba">をオンにし、md5認証を有効にします。
       （<productname>Aurora</productname>では常にmd5認証が有効になっています)
     </para>
    </listitem>
    <listitem>
     <para>
      <!--
      Create <filename>pool_password</filename>. See <xref linkend="auth-md5">
      for more details.
      -->
      <filename>pool_password</filename>を作成します。
      詳細は<xref linkend="auth-md5">をご覧ください。
     </para>
    </listitem>
    <listitem>
     <para>
      <!--
      Set <xref linkend="guc-backend-hostname">0 for the
      Aurora writer node.  Set
      other <xref linkend="guc-backend-hostname"> for the
      Aurora reader node.  Set
      appropreate <xref linkend="guc-backend-weight"> as
      usual. You don't need to
      set <xref linkend="guc-backend-data-directory">
      -->
      <xref linkend="guc-backend-hostname">0をAuroraのwriterノードに設定します。
       他の<xref linkend="guc-backend-hostname">はAuroraのreaderノードに設定します。
        <xref linkend="guc-backend-data-directory">は設定の必要がありません。
     </para>
    </listitem>
    <listitem>
     <para>
      <!--
      Set <varname>ALWAYS_MASTER</varname> flag to
      the <xref linkend="guc-backend-flag"> for the master
      node.
      -->
      <xref linkend="guc-backend-hostname">0の<xref linkend="guc-backend-flag">の<varname>ALWAYS_MASTER</varname>をオンにします。
     </para>
    </listitem>
    <listitem>
     <para>
      <!--
      Enable health checking.
      Set <xref linkend="guc-health-check-period"> to 5.
      Set <xref linkend="guc-health-check-user">, <xref linkend="guc-health-check-password">,
      <xref linkend="guc-health-check-user"> and
      <xref linkend="guc-health-check-database"> to appropriate values.
      Enable health check retry.
      <productname>Aurora</productname> shutdowns all DB nodes while switching
      over or failover. If the retry is not performed,
      <productname>Pgpool-II</productname> thinks that all DB nodes are in down status
      so that it is required to restart <productname>Pgpool-II</productname>.
      Set <xref linkend="guc-health-check-max-retries"> to 20.
      Set <xref linkend="guc-health-check-retry-delay"> to 1 to avoid the problem.
      -->
      ヘルスチェックを有効にします。
      <xref linkend="guc-health-check-period">に5を設定します.
       <xref linkend="guc-health-check-user">、<xref linkend="guc-health-check-password">、
	 <xref linkend="guc-health-check-user">、<xref linkend="guc-health-check-database">
	   に適切な値を設定します。
	   リトライを設定します。
	   <productname>Aurora</productname>は、スィッチングオーバやフェイルオーバの際に、一時的に全DBノードを停止します。
	   リトライを行わないと、<productname>Pgpool-II</productname>から見ると全DBノードがダウン状態になり、<productname>Pgpool-II</productname>の再起動が必要になります。
	   <xref linkend="guc-health-check-max-retries">を20に、<xref linkend="guc-health-check-retry-delay">を1にして、そのような問題を回避してください。
     </para>
    </listitem>
    <listitem>
     <para>
      <!--
      Disable <xref linkend="guc-failover-on-backend-error">
      to avoid failover when connecting to the backend or
      detecting errors on backend side while executing
      queries for the same reasons above.
      -->
      同様の理由により、接続時あるいは問い合わせ実行中のエラーによるフェイルオーバを避けるために、<xref linkend="guc-failover-on-backend-error">をオフにしてください。
     </para>
    </listitem>
   </itemizedlist>
  </para>
 </sect2>
</sect1>
