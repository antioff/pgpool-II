<sect1 id="example-Kubernetes">
 <title><productname>Pgpool-II</productname> on Kubernetes</title>
 <para>
  This section describes how to run <productname>Pgpool-II</productname>
  to achieve read query load balancing and connection pooling on Kubernetes.
 </para>
 <sect2 id="example-Kubernetes-intro">
  <title>Introduction</title>
  <para>
   Because <productname>PostgreSQL</productname> is a stateful application and managing
   <productname>PostgreSQL</productname> has very specific requirements (e.g. backup,
   recovery, automated failover, etc), the built-in functionality of <productname>Kubernetes</productname>
   can't handle these tasks. Therefore, an Operator that extends the functionality of the Kubernetes to create
   and manage PostgreSQL is required.
  </para>
  <para>
   There are several PostgreSQL operators, such as
   <ulink url="https://github.com/CrunchyData/postgres-operator">Crunchy PostgreSQL Operator</ulink>,
   <ulink url="https://github.com/zalando/postgres-operator">Zalando PostgreSQL Operator</ulink> and
   <ulink url="https://github.com/kubedb/operator">KubeDB</ulink>.
   However, these operators don't provide query load balancing functionality.
  </para>
  <para>
   This section describes how to combine PostgreSQL Operator with Pgpool-II to deploy a PostgreSQL cluster
   with query load balancing and connection pooling capability on Kubernetes. Pgpool-II can be combined with
   any of the PostgreSQL operators mentioned above.
  </para>
 </sect2>

 <sect2 id="example-Kubernetes-architecture">
  <title>Architecture</title>
  <para>
   <figure>
    <title>Architecture</title>
    <mediaobject>
     <imageobject>
      <imagedata fileref="pgpool_on_k8s.gif">
     </imageobject>
    </mediaobject>
   </figure>
  </para>
 </sect2>

 <sect2 id="example-Kubernetes-pre-setup">
  <title>Prerequisites</title>
  <para>
   Before you start the configuration process, please check the following prerequisites.
  <itemizedlist>
   <listitem>
    <para>
     Make sure you have a <productname>Kubernetes</productname> cluster, and <command>kubectl</command> is installed.
    </para>
   </listitem>
   <listitem>
    <para>
     PostgreSQL Operator and a PostgreSQL cluster are installed.
    </para>
   </listitem>
  </itemizedlist>
  </para>
 </sect2>

 <sect2 id="example-Kubernetes-deploy-pgpool">
  <title>Deploy Pgpool-II</title>
  <para>
   <productname>Pgpool-II</productname>'s health check, automated failover,
   watchdog and online recovery features aren't required on
   <productname>Kubernetes</productname>.
   You need to only enable load balancing and connection pooling.
  </para>
  <para>
   The Pgpool-II pod should work with the minimal configuration below:
  </para>
  <programlisting>
backend_hostname0 = '&lt;primary service name&gt;'
backend_hostname1 = '&lt;replica service name&gt;'
backend_port0 = '5432'
backend_port1 = '5432'
backend_flag0 = 'ALWAYS_PRIMARY|DISALLOW_TO_FAILOVER'
backend_flag1 = 'DISALLOW_TO_FAILOVER'

failover_on_backend_error = off

sr_check_period = 10                         (when using streaming replication check)
sr_check_user='username of PostgreSQL user'  (when using streaming replication check)

load_balance_mode = on
connection_cache = on
listen_addresses = '*'
  </programlisting>
  <para>
   There are two ways to configure Pgpool-II.
   <orderedlist>
    <listitem>
     <para>
      Using <ulink url="https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/">environment variables</ulink>
     </para>
    </listitem>
    <listitem>
     <para>
      Using a <ulink url="https://kubernetes.io/docs/concepts/configuration/configmap/">ConfigMap</ulink>
     </para>
    </listitem>
   </orderedlist>
  </para>
  <para>
   You may need to configure client authentication and more parameters in a production environment.
   In a production environment, we recommend using a ConfigMap to configure pgpool.conf and pool_hba.conf.
  </para>
  <para>
   The following sections <xref linkend="example-Kubernetes-configure-pgpool-env">
   and <xref linkend="example-Kubernetes-configure-pgpool-configmap"> describe
   how to configure and deploy Pgpool-II pod using environment variables and
   ConfigMap respectively. These sections are using a minimal setting for
   demonstration purposes. We recommend that you read
   <xref linkend="example-Kubernetes-advanced-configuration"> to see how to
   properly configure Pgpool-II.
   You can download the example manifest files used for deploying Pgpool-II from
   <ulink url="https://github.com/pgpool/pgpool2_on_k8s">here</ulink>.
  </para>

  <sect3 id="example-Kubernetes-configure-pgpool-env">
   <title>Configure Pgpool-II using environment variables</title>
   <para>
    Kubernetes environment variables can be passed to a container in a pod.
    You can define environment variables in the deployment manifest to configure
    Pgpool-II's parameters.
    <filename>pgpool-deploy-minimal.yaml</filename> is an example
    manifest including the minimal settings of environment variables.
    You can download <filename>pgpool-deploy-minimal.yaml</filename> and modify
    the environment variables in this manifest.
   </para>
   <programlisting>
$ curl -LO https://raw.githubusercontent.com/pgpool/pgpool2_on_k8s/master/pgpool-deploy-minimal.yaml
   </programlisting>
   <para>
    Environment variables starting with <literal>PGPOOL_PARAMS_</literal> can be
    converted to Pgpool-II's configuration parameters and these values can
    override the default settings.
   </para>
   <para>
    On kubernetes, you need to specify <emphasis>only two backend nodes</emphasis>.
    Update <filename>pgpool-deploy-minimal.yaml</filename> based on your
    PostgreSQL cluster information.
    Specify the primary service name to <xref linkend="GUC-BACKEND-HOSTNAME">0.
    Specify the replica service name to <xref linkend="GUC-BACKEND-HOSTNAME">1.
    Because failover is managed by <productname>Kubernetes</productname>,
    specify <literal>DISALLOW_TO_FAILOVER</literal> flag to <xref linkend="GUC-BACKEND-FLAG">
    for both of the two nodes and <literal>ALWAYS_PRIMARY</literal> flag to <xref linkend="GUC-BACKEND-FLAG">0.
    The setiing of <xref linkend="GUC-BACKEND-DATA-DIRECTORY"> is not required.
   </para>
   <para>
    For example, the following environment variables defined in manifest,
   </para>
   <programlisting>
env:
- name: PGPOOL_PARAMS_BACKEND_HOSTNAME0
  value: "mypostgres"
- name: PGPOOL_PARAMS_BACKEND_HOSTNAME1
  value: "mypostgres-replica"
- name: PGPOOL_PARAMS_BACKEND_FLAG0
  value: "ALWAYS_PRIMARY|DISALLOW_TO_FAILOVER"
- name: PGPOOL_PARAMS_BACKEND_FLAG1
  value: "DISALLOW_TO_FAILOVER"
   </programlisting>
   <para>
    will be convert to the following configuration parameters in pgpool.conf.
   </para>
   <programlisting>
backend_hostname0 = 'mypostgres'
backend_hostname1 = 'mypostgres-replica'
backend_flag0 = 'ALWAYS_PRIMARY|DISALLOW_TO_FAILOVER'
backend_flag1 = 'DISALLOW_TO_FAILOVER'
   </programlisting>
   <para>
    Then, you need to define environment variables that contain the username and
    password of <productname>PostgreSQL</productname> users for client authentication.
    For more details see <xref linkend="pool-passwd-configuration">.
   </para>
   <para>
    After configuring the manifest, run the following command to deploy
    <productname>Pgpool-II</productname>.
   </para>
   <programlisting>
kubectl apply -f pgpool-deploy-minimal.yaml
   </programlisting>
  </sect3>

  <sect3 id="example-Kubernetes-configure-pgpool-configmap">
   <title>Configure Pgpool-II using ConfigMap</title>
   <para>
    Alternatively, you can use a Kubernetes <literal>ConfigMap</literal> to store
    entire pgpool.conf and pool_hba.conf.
    The <literal>ConfigMap</literal> can be mounted to Pgpool-II's container as
    a volume.
   </para>
   <para>
    You can download the example manifest files that define the
    <literal>ConfigMap</literal> and <literal>Deployment</literal>
    from <ulink url="https://github.com/pgpool/pgpool2_on_k8s">repository</ulink>.
   </para>
   <programlisting>
curl -LO https://raw.githubusercontent.com/pgpool/pgpool2_on_k8s/master/pgpool-configmap.yaml
curl -LO https://raw.githubusercontent.com/pgpool/pgpool2_on_k8s/master/pgpool-deploy.yaml
   </programlisting>
   <para>
    The manifest that defines the <literal>ConfigMap</literal> is in the
    following format. You can update it based on your configuration preferences.
    To use the <filename>pool_hba.conf</filename> for the client authentication,
    you need to turn on <xref linkend="GUC-ENABLE-POOL-HBA">. Default is <varname>off</varname>.
   </para>
   <programlisting>
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgpool-config
  labels:
    name: pgpool-config
data:
  pgpool.conf: |-
    listen_addresses = '*'
    port = 9999
    socket_dir = '/var/run/pgpool'
    pcp_listen_addresses = '*'
    pcp_port = 9898
    pcp_socket_dir = '/var/run/pgpool'
    backend_hostname0 = 'postgres'
...
  pool_hba.conf: |-
    local   all         all                               trust
    host    all         all         127.0.0.1/32          trust
    host    all         all         ::1/128               trust
    hostssl all         all         0.0.0.0/0             md5
   </programlisting>
   <para>
    Then, you need to define environment variables that contain the username and
    password of PostgreSQL users for client authentication.
    For more details see <xref linkend="pool-passwd-configuration">.
   </para>
   <para>
    Run the following commands to create a ConfigMap and deploy the Pgpool-II pod
    that references this ConfigMap.
   </para>
   <programlisting>
kubectl apply -f pgpool-configmap.yaml
kubectl apply -f pgpool-deploy.yaml
   </programlisting>
  <para>
   After deploying Pgpool-II, you can see the Pgpool-II pod and services using <command>kubectl get pod</command>
   and <command>kubectl get svc</command> command.
  </para>
  </sect3>
 </sect2>

 <sect2 id="example-Kubernetes-advanced-configuration">
  <title>Pgpool-II configuration</title>
  <sect3 id="backend-configuration">
   <title>Backend settings</title>
   <para>
    On kubernetes, you need to specify <emphasis>only two backend nodes</emphasis>.
    Specify the primary service name to <xref linkend="GUC-BACKEND-HOSTNAME">0,
    replica service name to <xref linkend="GUC-BACKEND-HOSTNAME">1.
   </para>
   <programlisting>
backend_hostname0 = '&lt;primary service name&gt;'
backend_hostname1 = '&lt;replica service name&gt;'
backend_port0 = '5432'
backend_port1 = '5432'
   </programlisting>
  </sect3>

  <sect3 id="disable-failover-configuration">
   <title>Automated failover</title>
   <para>
    Pgpool-II has the ability to periodically connect to the configured PostgreSQL
    backends and check the state of PostgreSQL. If an error is detected, Pgpool-II
    will trigger the failover.
    On Kubernetes, Kubernetes monitors the PostgreSQL pods,
    if a pod goes down, Kubernetes will restart a new one.
    You need to disable Pgpool-II's automated failover,
    becuase Pgpool-II's automated failover is not required on Kubernetes.
   </para>
   <para>
    Specify PostgreSQL node 0 as primary (<literal>ALWAYS_PRIMARY</literal>),
    because Service name doesn't change even if the primary or replica pod
    is sacled, restarted or failover occurred.
   </para>
   <programlisting>
backend_flag0 ='ALWAYS_PRIMARY|DISALLOW_TO_FAILOVER'
backend_flag1 ='DISALLOW_TO_FAILOVER'
failover_on_backend_error = off
   </programlisting>
  </sect3>

  <sect3 id="pool-passwd-configuration">
   <title>Register password to pool_passwd</title>
   <para>
    <productname>Pgpool-II</productname> performs authentication using
    <xref linkend="GUC-POOL-PASSWD"> file which contains the passwords
    of PostgreSQL users.
   </para>
   <para>
    At <productname>Pgpool-II</productname> pod startup,
    <productname>Pgpool-II</productname> automatically executes
    <xref linkend="PG-MD5"> command to generate <filename>pool_passwd</filename>
    based on the environment variables defined in the format
    <literal>&lt;some string&gt;_USERNAME</literal> and
    <literal>&lt;some string&gt;_PASSWORD</literal>.
   </para>
   <para>
    The environment variables that represent the username and password of
    <productname>PostgreSQL</productname> user must be defined in the following format:
   </para>
   <programlisting>
username: &lt;some string&gt;_USERNAME
password: &lt;some string&gt;_PASSWORD
   </programlisting>
   <para>
    Define the environment variables using Secret is the recommended way to keep user credentials secure.
    In most PostgreSQL Operators, several Secrets which define the
    <productname>PostgreSQL</productname> user's redentials will be automaticlly
    created when creating a PostgreSQL cluster.
    Use <command>kubectl get secret</command> command to check the existing Secrets.
   </para>
   <para>
    For example, <varname>mypostgres-postgres-secret</varname> is created to
    store the username and password of <literal>postgres</literal> user.
    To reference this secret, you can define the environment variables as below:
   </para>
   <programlisting>
env:
- name: POSTGRES_USERNAME
  valueFrom:
     secretKeyRef:
       name: mypostgres-postgres-secret
       key: username
- name: POSTGRES_PASSWORD
  valueFrom:
     secretKeyRef:
       name: mypostgres-postgres-secret
       key: password
   </programlisting>
   <para>
    When the <productname>Pgpool-II</productname> pod is started,
    <filename>pool_passwd</filename> and <filename>pcp.conf</filename> are
    automatically generated under <filename>/opt/pgpool-II/etc</filename>.
   </para>
   <programlisting>
$ kubectl exec &lt;pgpool pod&gt; -it -- cat /opt/pgpool-II/etc/pool_passwd
postgres:md53175bce1d3201d16594cebf9d7eb3f9d

$ kubectl exec &lt;pgpool pod&gt; -it -- cat /opt/pgpool-II/etc/pcp.conf
postgres:e8a48653851e28c69d0506508fb27fc5
   </programlisting>
  </sect3>

  <sect3 id="sr-check-configuration">
   <title>Streaming replication check</title>
   <para>
    <productname>Pgpool-II</productname> has the ability to periodically connect to the
    configured PostgreSQL backends and check the replication delay.
    To use this feature, <xref linkend="GUC-SR-CHECK-USER"> and <xref linkend="GUC-SR-CHECK-PASSWORD">
    are required. If <varname>sr_check_password</varname> is left blank,
    <productname>Pgpool-II</productname> will try to get the password for
    <xref linkend="GUC-SR-CHECK-USER"> from  <filename>pool_passwd</filename>.
   </para>
   <para>
    Below is an example that connects to PostgreSQL using <literal>postgres</literal> user
    every 10s to perform streaming replication check.
    Because <varname>sr_check_password</varname> is left blank,
    <productname>Pgpool-II</productname> will get the password of
    <literal>postgres</literal> user from <filename>pool_passwd</filename>.
   </para>
   <programlisting>
sr_check_period = 10
sr_check_user='postgres'
   </programlisting>
   <para>
    Create the secret to store the username and password of PostgreSQL user
    specified in <varname>sr_check_user</varname> and configure the
    environment variables to reference the created Secret.
    In most PostgreSQL Operators, several secrets which define the
    <productname>PostgreSQL</productname> user's redentials will be automaticlly
    created when creating a PostgreSQL cluster.
    Use <command>kubectl get secret</command> command to check the existing secrets.
   </para>
   <para>
    For example, the environment variables below reference the
    Secret <literal>mypostgres-postgres-secret</literal>.
   </para>
   <programlisting>
env:
- name: POSTGRES_USERNAME
  valueFrom:
     secretKeyRef:
       name: mypostgres-postgres-secret
       key: username
- name: POSTGRES_PASSWORD
  valueFrom:
     secretKeyRef:
       name: mypostgres-postgres-secret
       key: password
   </programlisting>
   <para>
    However, on Kubernetes Pgpool-II connects to any of the replicas
    rather than connecting to all the replicas.
    Even if there are multiple replicas, Pgpool-II manages them as one replica.
    Therefore, Pgpool-II may not be able to properly determine the replication delay.
    To disable this feature, configure the following parameter:
   </para>
   <programlisting>
sr_check_period = 0
   </programlisting>
  </sect3>

  <sect3 id="ssl-configuration">
   <title>SSL settings</title>
   <para>
    Turn on <varname>ssl</varname> to enable the SSL connections.
   </para>
   <programlisting>
ssl = on
   </programlisting>
   <para>
    When <varname>ssl = on</varname>, at <productname>Pgpool-II</productname>
    startup, private key file and certificate file will be automatically generated
    under <filename>/opt/pgpool-II/certs/</filename>.
    <varname>ssl_key</varname> and <varname>ssl_cert</varname>
    will be automatically configured with the path of private key file and
    certificate file.
   </para>
   <para>
    In addition, to allow only SSL connections, add the following record
    into the <filename>pool_hba.conf</filename>.
    For more details on configuring <filename>pool_hba.conf</filename>
    see <xref linkend="example-Kubernetes-configure-pgpool-configmap">.
   </para>
   <programlisting>
hostssl    all         all         0.0.0.0/0             md5
   </programlisting>
  </sect3>
 </sect2>

 <sect2 id="example-Kubernetes-monitoring">
  <title>Pgpool-II with monitoring</title>
   <para>
    <ulink url="https://github.com/pgpool/pgpool2_exporter">Pgpool-II Exporter</ulink>
    is a Prometheus exporter for Pgpool-II metrics.
   </para>
   <para>
    Sample manifest <filename>pgpool-deploy-metrics.yaml</filename> is used to deploy
    Pgpool-II container and Pgpool-II Exporter container in the Pgpool-II Pod.
   </para>
   <programlisting>
spec:
  containers:
  - name: pgpool
    image: pgpool/pgpool
  ...
  - name: pgpool-stats
    image: pgpool/pgpool2_exporter
  ...
   </programlisting>
   <para>
    Download the sample manifest <filename>pgpool-deploy-metrics.yaml</filename>.
   </para>
   <programlisting>
$ curl -LO https://raw.githubusercontent.com/pgpool/pgpool2_on_k8s/master/pgpool-deploy-metrics.yaml
   </programlisting>
   <para>
    Then, Configure Pgpool-II and Pgpool-II Exporter.
    For more details on configuring Pgpool-II see the previous section <xref linkend="example-Kubernetes-deploy-pgpool">.
    Below is the settings of the environment variables used in Pgpool-II exporter container
    to connect to Pgpool-II.
   </para>
   <programlisting>
env:
- name: POSTGRES_USERNAME
  valueFrom:
    secretKeyRef:
      name: mypostgres-postgres-secret
      key: username
- name: POSTGRES_PASSWORD
  valueFrom:
    secretKeyRef:
      name: mypostgres-postgres-secret
      key: password
- name: PGPOOL_SERVICE
  value: "localhost"
- name: PGPOOL_SERVICE_PORT
  value: "9999"
   </programlisting>
   <para>
    After configuring Pgpool-II and Pgpool-II Exporter, deploy Pgpool-II Pod.
   </para>
   <programlisting>
kubectl apply -f pgpool-configmap.yaml
kubectl apply -f pgpool-deploy-metrics.yaml
   </programlisting>
 </sect2>
</sect1>
