#!/bin/sh
# /etc/init.d/pgpool
# description:  Starts and stops the pgpool daemon.
# processname: pgpool

# Do not load RH compatibility interface.
WITHOUT_RC_COMPAT=1

# Source function library.
INITD=/etc/rc.d/init.d
. $INITD/functions

# For SELinux we need to use 'runuser' not 'su'
if [ -x /sbin/runuser ]
then
    SU=runuser
else
    SU=su
fi

# Set defaults for configuration variables
PGPOOLUSER=postgres
PGPOOLENGINE=/usr/bin
PGPOOLDAEMON=$PGPOOLENGINE/pgpool
PGPOOLCONF=/etc/pgpool/pgpool.conf
PGPOOLPIDDIR=/var/run/pgpool
PGPOOLLOG=/var/log/pgpool.log

PIDFILE=/var/run/pgpool/pgpool.pid
LOCKFILE=/var/lock/subsys/pgpool


# Check whether the config file exists or not
if [ ! -r $PGPOOLCONF ]
then
    	echo "$PGPOOLCONF not found"
        echo_failure
        echo
        exit 1
fi

# Create the log file if it does not exist
if [ ! -x $PGPOOLLOG ]
then
    	touch $PGPOOLLOG
        chown ${PGPOOLUSER}: $PGPOOLLOG
fi

if [ ! -d $PGPOOLPIDDIR ]
then
    	mkdir $PGPOOLPIDDIR
        chown ${PGPOOLUSER}: $PGPOOLPIDDIR
fi

script_result=0

start(){
        PGPOOL_START=$"Starting ${NAME} service: "

        echo -n "$PGPOOL_START"
        if [ -n "`pidofproc -p $PIDFILE $PGPOOLDAEMON`" ]
        then
                echo_success
                echo
                exit 0
        fi

	$SU -l $PGPOOLUSER -c "$PGPOOLDAEMON -f $PGPOOLCONF $OPTS & " >> "$PGPOOLLOG" 2>&1 < /dev/null
        sleep 2

        if [ -n "`pidofproc -p $PIDFILE $PGPOOLDAEMON`" ]
        then
            	success "$PGPOOL_START"
                touch "$LOCKFILE"
                echo
        else
            	failure "$PGPOOL_START"
                echo
                script_result=1
        fi
}

stop(){
       	PGPOOL_STOP=$"Stopping ${NAME} service: "

        echo -n "$PGPOOL_STOP"
        if [ -e "$LOCKFILE" ]
        then
            	$SU -l $PGPOOLUSER -c "$PGPOOLDAEMON -f $PGPOOLCONF -m fast stop" >> "$PGPOOLLOG" 2>&1 < /dev/null

                RETVAL=$?
                if [ $RETVAL -eq 0 ]
                then
                        success "$PGPOOL_STOP"
                        rm -f "$LOCKFILE"
                else
                    	failure "$PGPOOL_STOP"
                        script_result=1
                fi
        else
            	echo_success
        fi
	echo
}

restart(){
    stop
    start
}
reload(){
        PGPOOL_RELOAD=$"Reloading ${NAME} configuration: "

        echo -n "$PGPOOL_RELOAD"
        if [ -n "`pidofproc -p $PIDFILE $PGPOOLDAEMON`" ]
        then
            	$SU -l $PGPOOLUSER -c "$PGPOOLDAEMON -f $PGPOOLCONF reload" >> "$PGPOOLLOG" 2>&1 < /dev/null
        else
            	failure "$PGPOOL_RELOAD"
                echo
                exit 1
        fi
	RETVAL=$?
        if [ $RETVAL -eq 0 ]; then
                success "$PGPOOL_RELOAD"
        else
            	failure "$PGPOOL_RELOAD"
                script_result=1
        fi
        echo
}

condrestart(){
	[ -e "$LOCKFILE" ] && restart
}

condstop(){
	[ -e "$LOCKFILE" ] && stop
}

# See how we were called.
case "$1" in
  start)
        start
	;;
  stop)
       	stop
        ;;
  status)
	status -p $PIDFILE pgpool
        script_result=$?
        ;;
  restart)
        restart
        ;;
  reload|force-reload)
        reload
	;;
  condrestart|try-restart)
        condrestart
        ;;
  condstop)
	condstop
        ;;
  *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|condstop|reload|force-reload}"
        exit 2
esac

exit $script_result

